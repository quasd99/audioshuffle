#!/bin/bash

# default values
MAXDEPTH=2
AMOUNT=16
SAMPLE_RATE=48000
BITRATE=16
CHANNEL=2
AUTOPLAY=1
BPM=120
DURATION=`echo "60 $BPM" | awk '{printf "%f", $1 / $2}'`
TEMP=`mktemp -d`

echo temp:$TEMP

function printhelp {
    echo "usage: audioshuffle [options] [dir]"
    echo
    echo "audioshuffle searches recursivley for audiofiles (mp3,wav,ogg,m4a} in the specified directory."
    echo "randomly files will be chopped up and concatenated into a new file."
    echo
    echo "EXAMPLES:"
    echo
    echo "audioshuffle path/to/dir"
    echo "  audioshuffle with default values: 120BPM, 16 Slices, sample-rate 44100, bitrate 16, stereo, autoplay 1"
    echo
    echo "audioshuffle -b8 -c1 -r8000 -d60 -s8"
    echo "  audioshuffle with bit-rate 8, sample-rate 8000, mono, 60BPM, 8 slices"
    echo
    echo
    echo -e '  '-a'\t'"autoplay: 0 don't play audiofile, 1: play audiofile and prompt to keep file"
    echo -e '  '-b'\t'"bitrate: set bitrate 8, 16, 24"
    echo -e '  '-c'\t'"channels: 1 = mono, 2 = stereo"
    echo -e '  '-h'\t'"help: print this help"
    echo -e '  '-m'\t'"maxdepth: level for recursive directory search"
    echo -e '  '-r'\t'"samplerate: specifiy sample-rate e.g 8000, 41000, 48000"
    echo -e '      \t'"uncommon sample-rates are allowed  too"
    echo -e '  '-s'\t'"slices: amount of slices/files that are processed"
    echo -e '  '-t'\t'"tempo: define BPM for length of slices"
    echo
}

while getopts "ha:b:c:m:r:s:t:" arg; do
  case $arg in
    h)
        printhelp
        exit 0
      ;;
    a)
        if ! [[ "$OPTARG" =~ ^[0-9]+$ ]] ; then
            echo "-a: only integer value allowed"  
            exit 1
        fi
        AUTOPLAY=$OPTARG
        if [[ $AUTOPLAY -lt 0 ]] ; then AUTOPLAY=0 ; fi
        if [[ $AUTOPLAY -gt 1 ]] ; then AUTOPLAY=1 ; fi
      ;;
    b)
        if ! [[ "$OPTARG" =~ ^[0-9]+$ ]] ; then
            echo "-b: only integer value allowed"  
            exit 1
        fi
        BITRATE=$OPTARG
        if [[ $BITRATE -lt 0 ]] ; then BITRATE=1 ; fi
        if [[ $BITRATE -gt 24 ]] ; then BITRATE=24 ; fi
      ;;
    c)
        if ! [[ "$OPTARG" =~ ^[0-9]+$ ]] ; then
            echo "-c: only integer value allowed"  
            exit 1
        fi
        CHANNEL=$OPTARG
        if [[ $CHANNEL -lt 0 ]] ; then CHANNEL=1 ; fi
        if [[ $CHANNEL -gt 2 ]] ; then CHANNEL=2 ; fi
      ;;
    m)
        if ! [[ "$OPTARG" =~ ^[0-9]+$ ]] ; then
            echo "-m: only integer value allowed"  
            exit 1
        fi
        MAXDEPTH=$OPTARG
        if [[ $AUTOPLAY -lt 0 ]] ; then AUTOPLAY=0 ; fi
      ;;
    r)
        if ! [[ "$OPTARG" =~ ^[0-9]+$ ]] ; then
            echo "-r: only integer value allowed"  
            exit 1
        fi
        SAMPLE_RATE=$OPTARG
        if [[ $SAMPLE_RATE -lt 100 ]] ; then SAMPLE_RATE=100 ; fi
        if [[ $SAMPLE_RATE -gt 96000 ]] ; then SAMPLE_RATE=96000 ; fi
      ;;
    s)
        if ! [[ "$OPTARG" =~ ^[0-9]+$ ]] ; then
            echo "-r: only integer value allowed"  
            exit 1
        fi
        AMOUNT=$OPTARG
        if [[ $AMOUNT -lt 0 ]] ; then AMOUNT=1 ; fi
      ;;
    t)
        if ! [[ "$OPTARG" =~ ^[0-9]+$ ]] ; then
            echo "-d: only integer value allowed"  
            exit 1
        fi
        BPM=$OPTARG
        if [[ $BPM -lt 0 ]] ; then BPM=1 ; fi
        DURATION=`echo "60 $BPM" | awk '{printf "%f", $1 / $2}'`
      ;;
    *)
        printhelp
        exit1
      ;;
  esac
done

shift $(($OPTIND - 1))

if [ -z $1 ] || [ ! -d $1 ] ; then
    echo you must specify a directory
    exit 1
fi

AUDIOPATH=$1
IFS_BAK=$IFS
IFS=$'\n'

echo "USING SETTINGS"
echo
echo " maxdepth:    $MAXDEPTH"
echo " amount:      $AMOUNT"
echo " sample-rate: $SAMPLE_RATE"
echo " bit-rate:    $BITRATE"
echo " channel:     $CHANNEL"
echo " autoplay:    $AUTOPLAY"
echo " bpm:         $BPM"
echo

DURATION=`echo "60 $BPM" | awk '{printf "%f", $1 / $2}' | tr ',' '.'`

echo -e "start reading directory recursively with maxdepth $MAXDEPTH"

FILES=`find "$AUDIOPATH" -maxdepth $MAXDEPTH -iname '*.mp3' -o -iname '*.wav' -o -iname '*.ogg' -o -iname '*.m4a' | shuf -n $AMOUNT`
if [ -z "$FILES" ] ; then
    echo "no files found, maybe increase maxdepth (-m)"
    exit 1
fi

echo -e "start processing files\n"

COUNTER=0
for file in $FILES ; do
    echo "$file"

    # set random startpoint
    FILELENGTH=`soxi -D "$file" 2> /dev/null`
    if [ -z $FILELENGTH ] ; then FILELENGTH=1 ; fi
    RND_VALUE=$((${FILELENGTH%.*} - ${DURATION%.*}))
    if [ $RND_VALUE -lt 1 ] ; then
        RND_STARTPOINT=0
    else
        RND_STARTPOINT=$((RANDOM % $RND_VALUE))
    fi
    #echo ' ' filelength: ${FILELENGTH%.*}, startpoint:$RND_STARTPOINT, duration:$DURATION

    # extract audio to tempfile
    sox "$file" -c $CHANNEL -r $SAMPLE_RATE -b $BITRATE $TEMP/temp$COUNTER.wav trim $RND_STARTPOINT $DURATION 2> /dev/null
    if [ $? -ne 0 ] ; then
        rm $TEMP/temp$COUNTER.wav
    fi

    COUNTER=$[$COUNTER +1]
done

# concat string with all tempfiles
CONC_FILES=
for file in `find $TEMP -maxdepth 1 -name "temp*.wav" | sort` ; do
    CONC_FILES+="$file "
done

# concat files
IFS=$IFS_BAK
RESULTFILE=audioshuffle_`date +'%F_%H_%M_%S'`__${BPM}bpm_${AMOUNT}beats.wav
sox $CONC_FILES $RESULTFILE

# play audio
if [ $AUTOPLAY -eq 1 ] ; then
    play $RESULTFILE

    echo
    echo -n "keep file (y/n)? "
    read keepfile
    if [ $keepfile != "y" ] ; then
        rm $RESULTFILE
    fi
fi

# remove temp files
rm -r $TEMP
